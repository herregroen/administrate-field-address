document.addEventListener('turbolinks:load', function () {
  var autocompleteService = new google.maps.places.AutocompleteService();

  function setAddress (placesService, address, map, marker) {
    autocompleteService.getPlacePredictions(
      { input: address },
      function (predictions, status) {
        if (status != google.maps.places.PlacesServiceStatus.OK || predictions.length == 0) {
          return;
        }
        placesService.getDetails(
          { placeId: predictions[0].place_id },
          function (place, status) {
            if (status == google.maps.places.PlacesServiceStatus.OK) {
              setPlace(place, map, marker);
            }
          }
        );
      }
    );
  }

  function setPlace (place, map, marker) {
    marker.setVisible(false);

    if (!place.geometry) {
      // User entered the name of a Place that was not suggested and
      // pressed the Enter key, or the Place Details request failed.
      window.alert("No details available for input: '" + place.name + "'");
      return;
    }

    // If the place has a geometry, then present it on a map.
    map.setCenter(place.geometry.location);

    marker.setIcon(/** @type {google.maps.Icon} */({
      url: place.icon,
      size: new google.maps.Size(71, 71),
      origin: new google.maps.Point(0, 0),
      anchor: new google.maps.Point(17, 34),
      scaledSize: new google.maps.Size(35, 35)
    }));
    marker.setPosition(place.geometry.location);
    marker.setVisible(true);
  }

  $('.address-input').each(function () {
    var input = this;
    var map = new google.maps.Map($(input).siblings('.address-input-map')[0], {
      center: { lat: <%= Administrate::Field::Address.latitude %>, lng: <%= Administrate::Field::Address.longitude %> },
      zoom: <%= Administrate::Field::Address.zoom %>
    });

    var placesService = new google.maps.places.PlacesService(map);

    map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

    var autocomplete = new google.maps.places.Autocomplete(input);
    autocomplete.bindTo('bounds', map);

    var marker = new google.maps.Marker({
      map: map,
      anchorPoint: new google.maps.Point(0, -29)
    });

    autocomplete.addListener('place_changed', function() {
      var place = autocomplete.getPlace();
      setPlace(place, map, marker);
    });

    if (input.value && input.value != '') {
      setAddress(placesService, input.value, map, marker);
    }
  });

  $('.address-show-map').each(function () {
    var map = new google.maps.Map(this, {
      center: { lat: <%= Administrate::Field::Address.latitude %>, lng: <%= Administrate::Field::Address.longitude %> },
      zoom: <%= Administrate::Field::Address.zoom %>
    });

    var placesService = new google.maps.places.PlacesService(map);

    var marker = new google.maps.Marker({
      map: map,
      anchorPoint: new google.maps.Point(0, -29)
    });

    var address = $(this).data('address');
    if (address && address != '') {
      map.controls[google.maps.ControlPosition.TOP_LEFT].push($(this).siblings('.address-label')[0]);
      setAddress(placesService, address, map, marker);
    }
  });
});
